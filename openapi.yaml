openapi: "3.1.0"
info:
  title: Stash Energy API
  license:
    name: ""
    url: "#"
  version: ""
  contact:
    name: API Support
    url: https://stash.energy/contact
    email: dev@stash.energy
  description: |
    # Introduction

    Welcome to the Stash Energy API documentation!

    If you're interested in integrating your utility management software with
    Stash Energy, please contact us!

    We currently provide our documentation in the form of an [OpenAPI 3.1.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md)
    document.

    ## Authentication

    Tokens should be made using the OAuth Bearer Token specification,
    using the Authorization header in the request.

    Here is an example:

    ```
    GET /utilities HTTP/1.1
    Host: api.stash.energy
    Authorization: Bearer {token}
    ```

    ### Authentication flow

    1. Get an `id` and `key` from your Stash Energy representative (one time only)
    2. Send a POST command to [this URL](https://auth.api.stash.energy/60658de9-a14c-4bb9-8dc5-26d1bd003872/oauth2/v2.0/token?p=b2c_1_auth&grant_type=password&scope=openid%20032d91df-6ddf-43d3-bcc9-8015d1f5a539&client_id=032d91df-6ddf-43d3-bcc9-8015d1f5a539&response_type=token) with the following parameters in the `x-www-form-urlencoded` format:
        * username = `<id>`
        * password = `<key>`
    3. Retrieve the access token from the `access_token` property of the JSON response
    4. Use this token to authenticate your API requests. (Include it in the Authorization header)

    **NOTE: The access token will be valid for 4 hours**
servers:
  - url: https://api.stash.energy
    description: Production Server
paths:
  /user:
    get:
      tags:
        - User
      operationId: getUser
      summary: Get current authenticated user
      description: Returns a User resource
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities:
    get:
      tags:
        - Utilities
      operationId: getUtilities
      summary: Get utilities
      description: |
        Returns a collection of Utility resources that the user has access to.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Utilities"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}:
    parameters:
      - $ref: "#/components/parameters/Utility"
    get:
      tags:
        - Utilities
      operationId: getUtilityById
      summary: Get a utility
      description: Returns the Utility resource corresponding to the provided id.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Utility"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/units:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/Limit"
      - $ref: "#/components/parameters/Page"
      - $ref: "#/components/parameters/Expand"
      - $ref: "#/components/parameters/Research"
    get:
      tags:
        - Units
      operationId: getUnitsForUtility
      summary: Get a utility's storage units
      description: |
        Returns a collection of Unit resources controlled by the given Utility.  
        Valid options for the `expand` query parameter include:  
          * `unit.state`: The unit's current state will be included in the response
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Units"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/units/{unitId}:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/Unit"
      - $ref: "#/components/parameters/Research"
    get:
      tags:
        - Units
      operationId: getUnitByIdForUtility
      summary: Get a storage unit
      description: >
        Returns a Unit resource corresponding to the given id, provided it is controlled
        by the given utility.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitWithState"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/units/{unitId}/past-states:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/Unit"
      - $ref: "#/components/parameters/StartTimestamp"
      - $ref: "#/components/parameters/EndTimestamp"
      - $ref: "#/components/parameters/Limit"
      - $ref: "#/components/parameters/Research"
    get:
      tags:
        - Units
      operationId: getPastStatesForUtilityUnit
      summary: Get a unit's past states
      description: |
        Returns a collection of State resources.  
        A State is a "snapshot" of a unit's physical state and/or the state of its environment
        at a particular moment in time (given by the `timestamp` property).  
        Use this endpoint to see the history of a unit's changing properties.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PastStates"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/units/{unitId}/past-states/{stateId}:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/Unit"
      - $ref: "#/components/parameters/State"
      - $ref: "#/components/parameters/Research"
    get:
      tags:
        - Units
      operationId: getPastStateByIdForUtilityUnit
      summary: Get a past state
      description: Returns a State corresponding to the given id.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/State"
                  - $ref: "#/components/schemas/ResearchState"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/units/{unitId}/realtime-schedule:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/Unit"
    get:
      tags:
        - Unit Storage
      operationId: getRealtimeScheduleForUtilityUnit
      summary: Get a realtime storage schedule
      description: |
        The realtime schedule tells a unit what storage mode to switch to at specific datetimes.  
        This is the schedule used when the `scheduleMode` of a unit is `"realtime"`.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealtimeStorageSchedule"
              examples:
                one:
                  $ref: "#/components/examples/RealtimeStorageScheduleResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
    put:
      tags:
        - Unit Storage
      operationId: setRealtimeScheduleForUtilityUnit
      summary: Set a unit's realtime storage schedule
      description: |
        Provide a realtime storage schedule for a unit.  
        A successful request means the schedule has been delivered to the unit.  
        A 503 error is returned if the update cannot be delivered to the unit.
      requestBody:
        $ref: "#/components/requestBodies/RealtimeStorageScheduleUpdate"
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealtimeStorageSchedule"
              examples:
                one:
                  $ref: "#/components/examples/RealtimeStorageScheduleResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /utilities/{utilityId}/units/{unitId}/weekly-schedule:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/Unit"
      - $ref: "#/components/parameters/UtcOffset"
    get:
      tags:
        - Unit Storage
      operationId: getWeeklyScheduleForUtilityUnit
      summary: Get a weekly storage schedule
      description: |
        This schedule is executed when there are no future storage mode changes in the realtime schedule.  
        This is the schedule used when the `scheduleMode` of a unit is `"weekly"`.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WeeklySchedule"
              examples:
                one:
                  $ref: "#/components/examples/WeeklyScheduleResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
    put:
      tags:
        - Unit Storage
      operationId: setWeeklyScheduleForUtilityUnit
      summary: Set a unit's weekly storage schedule
      description: |
        Provide a weekly storage schedule for a unit.  
        A successful request means the schedule has been delivered to the unit.  
        A 503 error is returned if the update cannot be delivered to the unit.
      requestBody:
        $ref: "#/components/requestBodies/WeeklyStorageScheduleUpdate"
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WeeklySchedule"
              examples:
                one:
                  $ref: "#/components/examples/WeeklyScheduleResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
components:
  responses:
    BadRequest: # 400
      description: BAD_REQUEST
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequest"
          examples:
            one:
              $ref: "#/components/examples/BadRequest"
    Unauthorized: # 401
      description: UNAUTHORIZED
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/Unauthorized"
    NotFound: # 404
      description: NOT_FOUND
      content:
        application/json: # What we send back
          schema:
            $ref: "#/components/schemas/NotFound"
          examples:
            one:
              $ref: "#/components/examples/NotFound"
    UnprocessableEntity: # 422
      description: UNPROCESSABLE_ENTITY
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnprocessableEntity"
          examples:
            one:
              $ref: "#/components/examples/UnprocessableEntity"
    InternalError: # 500
      description: INTERNAL_ERROR
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/InternalError"
    ServiceUnavailable: # 503
      description: SERVICE_UNAVAILABLE
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServiceUnavailable"
          examples:
            one:
              $ref: "#/components/examples/DeviceUpdateFailed"
  schemas:
    User:
      type: object
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          examples:
            - https://api.stash.energy/user
        name:
          type: string
          description: User's name
          readOnly: true
          examples:
            - Username
    Utilities:
      type: object
      readOnly: true
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          readOnly: true
          examples:
            - https://api.stash.energy/utilities
        pagination:
          $ref: "#/components/schemas/Pagination"
        utilities:
          type: array
          items:
            $ref: "#/components/schemas/Utility"
          description: List of utilities
    Utility:
      type: object
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          readOnly: true
          examples:
            - https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678
        id:
          type: string
          readOnly: true
          description: Utility ID (GUID)
          examples:
            - 12abcde3-fgh4-5ij6-k7l8-9012345mn678
        name:
          type: string
          description: Utility's name
          examples:
            - Stash Electric
    Units:
      type: object
      readOnly: true
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          examples:
            - https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units
        pagination:
          $ref: "#/components/schemas/Pagination"
        units:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/UnitWithState"
              - $ref: "#/components/schemas/Unit"
          description: List of units
    Unit:
      type: object
      properties:
        href:
          type: string
          format: uri
          description: URL to self
          readOnly: true
          examples:
            - https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units/ac57ae8227db0eb6977413961b6168a02dd59b59f2d78215908a1a04adc95fde0762fe1a107a795b2842fc91e43d7b50a4827765f757eae1a9a72232368b9788
        id:
          type: string
          readOnly: true
          description: Unit's ID
          examples:
            - ac57ae8227db0eb6977413961b6168a02dd59b59f2d78215908a1a04adc95fde0762fe1a107a795b2842fc91e43d7b50a4827765f757eae1a9a72232368b9788
        type:
          type: string
          readOnly: true
          description: The type of storage unit, e.g. M1
          examples:
            - M1
        connectionReliability:
          type: number
          readOnly: true
          description: Percentage of how likely the device is to be connected to the Internet (%)
          minimum: 0.0
          maximum: 100.0
          examples:
            - 89.7
        firmwareVersion:
          type: string
          readOnly: true
          description: The unit's Stash firmware version
          examples:
            - v1.1.0 (2019102513)
        maxCapacity:
          type: number
          readOnly: true
          description: |
            Deprecated: use `maxCharge` instead.  
            Max charge capacity of the storage unit, in kWh.
          deprecated: true
        maxCharge:
          type: number
          readOnly: true
          description: The maximum amount of thermal energy the system can store, converted to electrical units (kWh)
          examples:
            - 3.5
        maxChargeRate:
          type: number
          format: double
          readOnly: true
          description: |
            Deprecated: use `maxDemand` instead.  
            Max charge rate of the storage unit, in kW
          deprecated: true
        maxDemand:
          type: number
          readOnly: true
          description: The maximum electrical demand for the heat pump system (kW)
          examples:
            - 1.5
    UnitWithState:
      allOf:
        - $ref: "#/components/schemas/Unit"
        - type: object
          readOnly: true
          properties:
            state:
              oneOf:
                - $ref: "#/components/schemas/State"
                - $ref: "#/components/schemas/ResearchState"
    PastStates:
      type: object
      readOnly: true
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          examples:
            - https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units/ac57ae8227db0eb6977413961b6168a02dd59b59f2d78215908a1a04adc95fde0762fe1a107a795b2842fc91e43d7b50a4827765f757eae1a9a72232368b9788/past-states
        start:
          type: integer
          description: Start timestamp in epoch seconds that was provided in the request query parameters
          examples:
            - 1577836800
        end:
          type: integer
          description: End timestamp in epoch seconds that was provided in the request query parameters. If it was not provided, it is the timestamp of when the request was received
          examples:
            - 1577851200
        pagination:
          $ref: "#/components/schemas/Pagination"
        pastStates:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/State"
              - $ref: "#/components/schemas/ResearchState"
          description: List of past states
    State:
      type: object
      description: An object representing the unit's dynamic info at a specific time in history
      readOnly: true
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          examples:
            - https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units/12abcde3-fgh4-5ij6-k7l8-9012345mn678/past-states/12abcde3-fgh4-5ij6-k7l8-9012345mn678
        id:
          type: string
          description: State ID (GUID)
          examples:
            - "12abcde3-fgh4-5ij6-k7l8-9012345mn678"
        timestamp:
          type: integer
          description: Timestamp in epoch seconds of when this state was recorded
          examples:
            - 1577836801
        scheduleMode:
          $ref: "#/components/schemas/ScheduleModeEnum"
        storageMode:
          $ref: "#/components/schemas/StorageModeEnum"
        chargeLimit:
          type: object
          description: Based on the forecasted consumption this is the maximum and minimum amounts of energy the system will store (kWh)
          readOnly: true
          properties:
            min:
              type: number
              description: The device will not discharge beyond this limit (kWh)
              examples:
                - 0.0
            max:
              type: number
              description: The device will not charge past this limit (kWh)
              examples:
                - 2.0
        chargeRate:
          type: number
          format: double
          description: |
            Deprecated - use `demand` instead.  
            Current charging rate, in kW
          readOnly: true
          deprecated: true
        demand:
          type: number
          description: The electrical energy the heat pump is using (kW)
          readOnly: true
          examples:
            - 1.25
        dischargeRate:
          type: number
          format: double
          description: |
            Deprecated - use `consumption` instead.  
            Current discharge rate, in kW
          readOnly: true
          deprecated: true
        consumption:
          type: number
          description: The thermal energy going into the home, converted to its electrical equivalent (kW)
          readOnly: true
          examples:
            - 0.0
        charge:
          type: number
          description: The amount of thermal energy stored in the unit, converted to its electrical equivalent (kWh)
          readOnly: true
          examples:
            - 1.5
        outdoorTemp:
          type: number
          description: The outdoor ambient temperature (ºC)
          readOnly: true
          examples:
            - 16.5
    ResearchState:
      allOf:
        - $ref: "#/components/schemas/State"
        - type: object
          readOnly: true
          properties:
            indoorTemp:
              type: number
              description: The ambient indoor temperature as recorded by the unit (ºC)
              readOnly: true
              examples:
                - 21.5
            indoorOutTemp:
              type: number
              description: The temperature of the air exiting the unit (ºC)
              readOnly: true
              examples:
                - 30.0
            indoorFanSpeed:
              type: integer
              description: Percentage of how fast the indoor fan is running (%)
              minimum: 0
              maximum: 100
              readOnly: true
              examples:
                - 75
            outdoorFanSpeed:
              type: integer
              description: Percentage of how fast the outdoor heat pump fan is running (%)
              minimum: 0
              maximum: 100
              readOnly: true
              examples:
                - 0
            compressorSpeed:
              type: integer
              description: Percentage of how fast the compressor is running (%)
              minimum: 0
              maximum: 100
              readOnly: true
              examples:
                - 0
            defrost:
              type: integer
              description: Whether or not the heat pump is defrosting (0 - no, 1 - yes)
              minimum: 0
              maximum: 1
              examples:
                - 0
            setpoint:
              type: number
              description: The user-set setpoint (ºC)
              readOnly: true
              examples:
                - 23.5
    StorageModeEnum:
      type: string
      description: |
        Describes the storage mode of the unit. The allowed values are:
        * "charge": The unit is charging
        * "discharge": The unit is discharging
        * "maintain": The unit is maintaining its charge
      enum:
        - charge
        - discharge
        - maintain
      examples:
        - charge
    RealtimeStorageSchedule:
      type: object
      description: A unit's schedule, consisting of a list of StorageEvents. Times are in epoch seconds
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          readOnly: true
        schedule:
          type: array
          description: A list of times to change the unit's storage mode
          items:
            $ref: "#/components/schemas/StorageEvent"
      required:
        - href
        - schedule
    WeeklySchedule:
      type: object
      description: |
        A unit's weekly schedule, consisting of a list of weekdays and 24h times when to change the storage mode.  
        The unit will use this schedule if no other schedule is provided. This schedule is only active when a Units' scheduleMode state is set to "weekly"
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          readOnly: true
        utcOffset:
          type: integer
          format: int32
          description: "The UTC offset in seconds as given in the query parameter"
          minimum: -86399
          maximum: 86399
          readOnly: true
        schedule:
          type: array
          items:
            $ref: "#/components/schemas/WeeklyStorageModeChange"
          description: Weekly schedule
      required:
        - utcOffset
        - schedule
    ScheduleModeEnum:
      type: string
      description: |
        Describes the schedule mode of the unit. The allowed values are:
        * "off": The unit is not using a schedule and the storage mode will be set to "maintain"
        * "weekly": The unit is using its weekly schedule to determine its storage mode
        * "realtime": The unit is using the provided real-time schedule to determine its storage mode
      enum:
        - off
        - weekly
        - realtime
    StorageEvent:
      type: object
      properties:
        start:
          type: integer
          description: When the event should begin (epoch seconds timestamp)
          examples:
            - 1577836800
        end:
          type: integer
          description: When the event should end (epoch seconds timestamp)
          examples:
            - 1577851200
        storageMode:
          $ref: "#/components/schemas/StorageModeEnum"
      required:
        - start
        - end
        - storageMode
    WeeklyStorageModeChange:
      type: object
      properties:
        storageMode:
          $ref: "#/components/schemas/StorageModeEnum"
        time:
          type: integer
          format: int32
          minimum: 0
          maximum: 86339
          description: "When to set storage mode (In seconds after midnight)"
          examples:
            - 25200
        days:
          type: array
          items:
            type: boolean
          description: |
            An array of size 7 representing the weekdays on which this change should take place.  
            **NOTE: `days` array starts at Sunday, i.e. `days[0]` = Sunday**
          examples:
            - [false, true, true, true, true, true, false]
      required:
        - storageMode
        - time
        - days
    Pagination:
      description: Object with information about the result set (total results, where to get the next page of results, etc.)
      type: object
      properties:
        total:
          type: integer
          description: Total number of results in the response
          examples:
            - 50
        limit:
          type: integer
          minimum: 1
          maximum: 1000
          description: The limit of results per request
          examples:
            - 50
        next:
          type: string
          format: uri
          description: URL to the next page of results. This property is not present if not applicable
      required:
        - total
        - limit
    BadRequest:
      $ref: "#/components/schemas/Error"
    Unauthorized:
      type: string
      examples:
        - You do not have permission to view this directory or page.
    Forbidden:
      $ref: "#/components/schemas/Error"
    NotFound:
      $ref: "#/components/schemas/Error"
    InternalError:
      type: string
      examples:
        - The page cannot be displayed because an internal server error has occurred.
    ServiceUnavailable:
      $ref: "#/components/schemas/Error"
    UnprocessableEntity:
      $ref: "#/components/schemas/Error"
    Error:
      type: object
      description: Sent by API
      properties:
        status:
          type: integer
          description: HTTP status code
          examples:
            - 404
        code:
          type: integer
          description: A more descriptive internal code
          examples:
            - 40401
        message:
          type: string
          description: A message describing the error
        errors:
          type: array
          items:
            $ref: "#/components/schemas/FieldError"
          description: If applicable, the parts of the request that are producing the error
      required:
        - status
        - code
        - message
    FieldError:
      type: object
      description: An error to do with a specific property/field
      properties:
        property:
          type: string
          description: The property/field of the request url/body that is producing the error
        message:
          type: string
          description: A message describing the issue with the property
  parameters:
    Expand:
      name: expand
      in: query
      description: |
        A comma separated list of propert(y|ies) you wish to expand in the response (that otherwise would not be provided).  
        Currently only valid for the `/units` endpoint.
      schema:
        type: array
        items:
          type: string
    Research:
      name: research
      in: query
      description: |
        A value of `1` expresses interest in getting state that has additional properties that can be used for research purposes.  
        Only available for certain units that allow it.
      schema:
        type: integer
        default: 0
      examples:
        none:
          value: 0
          summary: Request normal state (same as omitting the query parameter)
        one:
          value: 1
          summary: Request state with additional properties
    Utility:
      name: utilityId
      in: path
      description: A utility ID (GUID)
      required: true
      schema:
        type: string
      example: "12abcde3-fgh4-5ij6-k7l8-9012345mn678"
    Unit:
      name: unitId
      in: path
      description: A unit ID
      required: true
      schema:
        type: string
      example: ac57ae8227db0eb6977413961b6168a02dd59b59f2d78215908a1a04adc95fde0762fe1a107a795b2842fc91e43d7b50a4827765f757eae1a9a72232368b9788
    State:
      name: stateId
      in: path
      description: A past state ID (GUID)
      required: true
      schema:
        type: string
      example: "12abcde3-fgh4-5ij6-k7l8-9012345mn678"
    Limit:
      name: limit
      in: query
      description: The number of items to return
      schema:
        type: integer
        format: int32
        default: 50
    Page:
      name: page
      in: query
      description: |
        An opaque, API-generated token that will be provided to you if your previous request was paged and there are one or more pages remaining.
      schema:
        type: string
    StartTimestamp:
      name: start
      in: query
      description: Timestamp in epoch seconds specifying the oldest time for which to pull results
      required: true
      schema:
        type: integer
        format: int64
      example: 1577836800
    EndTimestamp:
      name: end
      in: query
      description: |
        Timestamp in epoch seconds specifying the most recent time for which to pull results.  
        If not provided, defaults to current time.
      schema:
        type: integer
        format: int64
      example: 1577851200
    UtcOffset:
      name: utcOffset
      in: query
      description: |
        ### When PUTing a Weekly Schedule
        A number representing how much the provided schedule is offset from UTC (in seconds).

        This is for convenience sake, so you don't have to adjust your schedule to UTC before submitting
        the schedule if you don't want to. It's a small pain to do, so if you don't do it, we will do it for you. (We store schedules in UTC.)  

        For example, Saturdays and Sundays at 00:00 UTC-4:00 (Atlantic Standard Time) is Fridays and Saturdays at 20:00 UTC. You have the option
        of sending that schedule in your preferred time zone with url

        `.../weekly-schedule?utcOffset=-14400`

        and body as

        ```json
        { 
          "schedule": [ 
            {
              "time": 0, 
              "days": [true, false, false, false, false, false, true],
              "storageMode": "charge"
            } 
          ] 
        }
        ```

        or in UTC time with url

        `.../weekly-schedule?utcOffset=0` or `.../weekly-schedule`

        and body as

        ```json
        { 
          "schedule": [ 
            { 
              "time": 72000, 
              "days": [false, false, false, false, false, true, true],
              "storageMode": "charge" 
            } 
          ] 
        }
        ```

        ### When GETting a Weekly Schedule
        A number denoting how much the returned schedule will be offset from UTC time (in seconds).
      schema:
        type: integer
        format: int32
        minimum: -86399
        maximum: 86399
        default: 0
      example: 25200
  requestBodies:
    RealtimeStorageScheduleUpdate:
      description: A storage mode schedule
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RealtimeStorageSchedule"
          examples:
            scheduleUpdateExample:
              $ref: "#/components/examples/RealtimeStorageScheduleRequestBody"
    WeeklyStorageScheduleUpdate:
      description: A weekly storage mode schedule
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WeeklySchedule"
          examples:
            weeklyScheduleUpdateExample:
              $ref: "#/components/examples/WeeklyScheduleRequestBody"
  examples:
    RealtimeStorageScheduleRequestBody:
      value:
        schedule:
          - start: 1577836800
            end: 1577851200
            storageMode: "charge"
          - start: 1577851200
            end: 1577865600
            storageMode: "maintain"
          - start: 1577865600
            end: 1577880000
            storageMode: "discharge"
    WeeklyScheduleRequestBody:
      value:
        schedule:
          - time: 0
            days: [false, true, true, true, true, true, false]
            storageMode: "charge"
          - time: 25200
            days: [false, true, true, true, true, true, false]
            storageMode: "discharge"
          - time: 32400
            storageMode: "charge"
            days: [false, true, true, true, true, true, false]
    RealtimeStorageScheduleResponse:
      value:
        href: https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units/12abcde3-fgh4-5ij6-k7l8-9012345mn678/realtime-schedule
        schedule:
          - start: 1577836800
            end: 1577851200
            storageMode: "charge"
          - start: 1577851200
            end: 1577865600
            storageMode: "maintain"
          - start: 1577865600
            end: 1577880000
            storageMode: "discharge"
    WeeklyScheduleResponse:
      value:
        href: https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units/12abcde3-fgh4-5ij6-k7l8-9012345mn678/weekly-schedule
        utcOffset: 0
        schedule:
          - time: 0
            days: [false, true, true, true, true, true, false]
            storageMode: "charge"
          - time: 25200
            days: [false, true, true, true, true, true, false]
            storageMode: "discharge"
          - time: 32400
            storageMode: "charge"
            days: [false, true, true, true, true, true, false]
    BadRequest:
      value:
        status: 400
        code: 40001
        message: "Could not parse body of request"
    NotFound:
      value:
        status: 404
        code: 40401
        message: "Utility not found: '12abcde3-fgh4-5ij6-k7l8-9012345mn678'"
    UnprocessableEntity:
      value:
        status: 422
        code: 42201
        message: Could not process request
        errors:
          - property: schedule[0].storageMode
            message: Value "chrge" is not defined in enum.
    DeviceUpdateFailed:
      value:
        status: 503
        code: 50301
        message: Could not update device
