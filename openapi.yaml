openapi: "3.1.0"
info:
  title: Stash Energy API
  license:
    name: "BSD"
    url: "#"
  version: ""
  contact:
    name: API Support
    url: https://stash.energy/contact
    email: dev@stash.energy
  description: |
    # Introduction

    Welcome to the Stash Energy API documentation!

    If you're interested in integrating your utility management software with
    Stash Energy, please contact us!

    ## Changelog

    ### 2022-02-23
    - Added: The serial number of a unit is now included in the `serialNumber` property of Unit responses
    - Changed: Tags can now include any character
    - Changed: Pairing codes now expire in 24 hours
security:
  - OAuth2:
      - "openid 032d91df-6ddf-43d3-bcc9-8015d1f5a539"
servers:
  - url: https://api.stash.energy
    description: Production Server
paths:
  /user:
    get:
      tags:
        - User
      operationId: getUser
      summary: Get current authenticated user
      description: Returns a User resource
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities:
    get:
      tags:
        - Utilities
      operationId: getUtilities
      summary: Get utilities
      description: |
        Returns a collection of Utility resources that the user has access to.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Utilities"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}:
    parameters:
      - $ref: "#/components/parameters/Utility"
    get:
      tags:
        - Utilities
      operationId: getUtilityById
      summary: Get a utility
      description: Returns the Utility resource corresponding to the provided id.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Utility"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/pairing-codes:
    parameters:
      - $ref: "#/components/parameters/Utility"
    post:
      tags:
        - Utilities
      operationId: createUnitPairingCode
      summary: Create a unit pairing code
      description: |
        Creates and returns a pairing code that can be entered into a Stash unit to pair that unit with the utility.

        When creating a pairing code, the `status` will always be `"new"` and the `unitId` will always be `null`. Continue monitoring these fields by querying the code at the [Get a unit pairing code](#operation/getUnitPairingCode) endpoint
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PairingCode"
              examples:
                one:
                  $ref: "#/components/examples/NewPairingCodeResponseExample"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/pairing-codes/{pairingCodeId}:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/PairingCode"
    get:
      tags:
        - Utilities
      operationId: getUnitPairingCode
      summary: Get a unit pairing code
      description: Returns information for an existing pairing code
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PairingCode"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/units:
    parameters:
      - $ref: "#/components/parameters/Utility"
    get:
      tags:
        - Units
      operationId: getUnitsForUtility
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Research"
        - name: weeklyScheduleUtcOffset
          in: query
          description: A number denoting how much the weekly storage schedule will be offset from UTC time (in seconds).
          schema:
            type: integer
            format: int32
            minimum: -86399
            maximum: 86399
            default: 0
        - name: tags
          in: query
          description: Filter units by tag. Only units with these tags will be returned. Currently only accepts 1 tag.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      summary: Get a utility's storage units
      description: Returns a collection of Unit resources controlled by the given Utility.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Units"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/units/update:
    parameters:
      - $ref: "#/components/parameters/Utility"
    patch:
      tags:
        - Units
      summary: Update units by id
      description: Update units by providing an array of individual unit updates
      operationId: units_update
      requestBody:
        $ref: "#/components/requestBodies/UpdateUnitsRequestBody"
      responses:
        "204":
          description: SUCCESS
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /utilities/{utilityId}/units/update-by-tags:
    parameters:
      - $ref: "#/components/parameters/Utility"
    patch:
      tags:
        - Units
      summary: Update units by tag
      description: Send an update to a group of units.
      operationId: units_updateByTags
      requestBody:
        $ref: "#/components/requestBodies/UpdateUnitsByTagsRequestBody"
      responses:
        "204":
          description: SUCCESS
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /utilities/{utilityId}/units/{unitId}:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/Unit"
    get:
      parameters:
        - $ref: "#/components/parameters/Research"
        - name: weeklyScheduleUtcOffset
          in: query
          description: A number denoting how much the weekly storage schedule will be offset from UTC time (in seconds).
          schema:
            type: integer
            format: int32
            minimum: -86399
            maximum: 86399
            default: 0
      tags:
        - Units
      operationId: getUnitByIdForUtility
      summary: Get a storage unit
      description: |
        Returns a Unit resource corresponding to the given id, provided it is controlled by the given utility.  
        **NOTE: all unit properties are expanded by default.**
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/units/{unitId}/past-states:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/Unit"
      - $ref: "#/components/parameters/StartTimestamp"
      - $ref: "#/components/parameters/EndTimestamp"
      - $ref: "#/components/parameters/Limit"
      - $ref: "#/components/parameters/Research"
    get:
      tags:
        - Units
      operationId: getPastStatesForUtilityUnit
      summary: Get a unit's past states
      description: |
        Returns a collection of State resources.  
        A State is a "snapshot" of a unit's physical state and/or the state of its environment
        at a particular moment in time (given by the `timestamp` property).  
        Use this endpoint to see the history of a unit's changing properties.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PastStates"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/units/{unitId}/past-states/{stateId}:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/Unit"
      - $ref: "#/components/parameters/State"
      - $ref: "#/components/parameters/Research"
    get:
      tags:
        - Units
      operationId: getPastStateByIdForUtilityUnit
      summary: Get a past state
      description: Returns a State corresponding to the given id.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/State"
                  - $ref: "#/components/schemas/ResearchState"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/units/{unitId}/realtime-schedule:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/Unit"
    get:
      tags:
        - Unit Storage
      operationId: getRealtimeScheduleForUtilityUnit
      summary: Get a realtime storage schedule
      description: |
        The realtime schedule tells a unit what storage mode to switch to at specific datetimes.  
        This is the schedule used when the `scheduleMode` of a unit is `"realtime"`.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealtimeStorageScheduleResponse"
              examples:
                one:
                  $ref: "#/components/examples/RealtimeStorageScheduleResponseExample"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
    put:
      tags:
        - Unit Storage
      operationId: setRealtimeScheduleForUtilityUnit
      summary: Set a unit's realtime storage schedule
      description: |
        Provide a realtime storage schedule for a unit.  
        A successful request means the schedule will be guaranteed to be delivered to the unit within 5 minutes. You can check whether the schedule has been delivered by querying the schedule's `hasBeenDelivered` property.
      requestBody:
        $ref: "#/components/requestBodies/RealtimeStorageScheduleRequestBody"
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RealtimeStorageScheduleResponse"
              examples:
                one:
                  $ref: "#/components/examples/RealtimeStorageScheduleResponseExample"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalError"
  /utilities/{utilityId}/units/{unitId}/weekly-schedule:
    parameters:
      - $ref: "#/components/parameters/Utility"
      - $ref: "#/components/parameters/Unit"
    get:
      tags:
        - Unit Storage
      operationId: getWeeklyScheduleForUtilityUnit
      parameters:
        - $ref: "#/components/parameters/UtcOffset_wsget"
      summary: Get a weekly storage schedule
      description: |
        This schedule is executed when there are no future storage mode changes in the realtime schedule.  
        This is the schedule used when the `scheduleMode` of a unit is `"weekly"`.
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WeeklySchedule"
              examples:
                one:
                  $ref: "#/components/examples/WeeklyStorageScheduleResponseExample"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
    put:
      tags:
        - Unit Storage
      operationId: setWeeklyScheduleForUtilityUnit
      parameters:
        - $ref: "#/components/parameters/UtcOffset_wsput"
      summary: Set a unit's weekly storage schedule
      description: |
        Provide a weekly storage schedule for a unit.  
        A successful request means the schedule will be guaranteed to be delivered to the unit within 5 minutes. You can check whether the schedule has been delivered by querying the schedule's `hasBeenDelivered` property.
      requestBody:
        $ref: "#/components/requestBodies/WeeklyStorageScheduleRequestBody"
      responses:
        "200":
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WeeklySchedule"
              examples:
                one:
                  $ref: "#/components/examples/WeeklyStorageScheduleResponseExample"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalError"
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: |
        Get a username and password from your Stash Energy representative.

        **NOTE: The access token will be valid for 4 hours**

        ## Security best practices

        * ALWAYS keep your password and access tokens in a secure location.
        * DO NOT share your password or access tokens.
        * NEVER check your password or access tokens into version control (ex. git).
        * It is RECOMMENDED to change your password at least every 6 months.

        We reserve the right to revoke access to any user who abuses the API.
      flows:
        password:
          tokenUrl: https://auth.api.stash.energy/60658de9-a14c-4bb9-8dc5-26d1bd003872/oauth2/v2.0/token?p=b2c_1_auth
          scopes:
            "openid 032d91df-6ddf-43d3-bcc9-8015d1f5a539": "Execute all commands"

  responses:
    BadRequest: # 400
      description: BAD_REQUEST
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequest"
          examples:
            one:
              $ref: "#/components/examples/BadRequestResponseExample"
    Unauthorized: # 401
      description: UNAUTHORIZED
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/Unauthorized"
    Forbidden: # 403
      description: FORBIDDEN
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/Forbidden"
    NotFound: # 404
      description: NOT_FOUND
      content:
        application/json: # What we send back
          schema:
            $ref: "#/components/schemas/NotFound"
          examples:
            one:
              $ref: "#/components/examples/NotFoundResponseExample"
    UnprocessableEntity: # 422
      description: UNPROCESSABLE_ENTITY
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnprocessableEntity"
          examples:
            one:
              $ref: "#/components/examples/UnprocessableEntityResponseExample"
    InternalError: # 500
      description: INTERNAL_ERROR
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/InternalError"
  schemas:
    User:
      type: object
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          examples:
            - https://api.stash.energy/user
        name:
          type: string
          description: User's name
          readOnly: true
          examples:
            - Username
    Utilities:
      type: object
      readOnly: true
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          readOnly: true
          examples:
            - https://api.stash.energy/utilities
        pagination:
          $ref: "#/components/schemas/Pagination"
        utilities:
          type: array
          items:
            $ref: "#/components/schemas/Utility"
          description: List of utilities
    Utility:
      type: object
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          readOnly: true
          examples:
            - https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678
        id:
          type: string
          readOnly: true
          description: Utility ID
          examples:
            - 1-12abcde3-fgh4-5ij6-k7l8-9012345mn678
        name:
          type: string
          description: Utility's name
          examples:
            - Stash Electric
    Units:
      type: object
      readOnly: true
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          examples:
            - https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units
        pagination:
          $ref: "#/components/schemas/Pagination"
        units:
          type: array
          items:
            $ref: "#/components/schemas/UnitResponse"
          description: List of units
    UnitResponse:
      type: object
      required:
        - href
        - id
        - tags
        - type
        - firmwareVersion
        - connectionReliability
        - maxCharge
        - maxDemand
      properties:
        href:
          type: string
          format: uri
          description: URL to self
          readOnly: true
          examples:
            - https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units/ac57ae8227db0eb6977413961b6168a02dd59b59f2d78215908a1a04adc95fde0762fe1a107a795b2842fc91e43d7b50a4827765f757eae1a9a72232368b9788
        id:
          type: string
          readOnly: true
          description: Unit's ID
          examples:
            - ac57ae8227db0eb6977413961b6168a02dd59b59f2d78215908a1a04adc95fde0762fe1a107a795b2842fc91e43d7b50a4827765f757eae1a9a72232368b9788
        serialNumber:
          type: string
          readOnly: true
          description: Unit's serial number
          examples:
            - ABCDEF01
        type:
          type: string
          readOnly: true
          description: The type of storage unit, e.g. M1
          examples:
            - M1
        tags:
          type: array
          readOnly: true
          items:
            type: string
          description: Array of tags assigned to this unit.
          examples:
            - ["tag1"]
        connectionReliability:
          type: number
          readOnly: true
          description: Percentage of how likely the device is to be connected to the Internet (%)
          minimum: 0.0
          maximum: 100.0
          examples:
            - 89.7
        firmwareVersion:
          type: string
          readOnly: true
          description: The unit's Stash firmware version
          examples:
            - v1.1.0 (2019102513)
        maxCapacity:
          type: number
          readOnly: true
          description: |
            Deprecated: use `maxCharge` instead.  
            Max charge capacity of the storage unit, in kWh.
          deprecated: true
        maxCharge:
          type: number
          readOnly: true
          description: The maximum amount of thermal energy the system can store, converted to electrical units (kWh)
          examples:
            - 3.5
        maxChargeRate:
          type: number
          format: double
          readOnly: true
          description: |
            Deprecated: use `maxDemand` instead.  
            Max charge rate of the storage unit, in kW
          deprecated: true
        maxDemand:
          type: number
          readOnly: true
          description: The maximum electrical demand for the heat pump system (kW)
          examples:
            - 1.5
        state:
          description: The unit's most recent recorded state
          oneOf:
            - $ref: "#/components/schemas/State"
            - $ref: "#/components/schemas/ResearchState"
        weeklySchedule:
          $ref: "#/components/schemas/WeeklyScheduleResponse"
        realtimeSchedule:
          $ref: "#/components/schemas/RealtimeScheduleResponse"
    PairingCode:
      type: object
      readOnly: true
      properties:
        href:
          type: string
          format: uri
          description: URL to self
          readOnly: true
          examples:
            - https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/pairing-codes/01234567
        code:
          type: string
          description: The pairing code to be entered into the Stash device
          examples:
            - "01234567"
        expiresOn:
          type: integer
          description: Unix timestamp of when this code expires
          examples:
            - 1617836800
        status:
          type: string
          enum:
            - "success"
            - "new"
            - "error"
            - "unitAlreadyPaired"
          description: |
            The status of the pairing:
            * `"new"`: The pairing code is new and hasn't been used yet
            * `"success"`: The pairing was completed successfully
            * `"error"`: There was an error pairing the device but you can try again with the same code
            * `"unitAlreadyPaired"`: The unit cannot be paired because it is already paired with another utility
        unitId:
          type: string
          description: The ID of the unit that was paired successfully to the utility. Only populated when the pairing code `status` is `"success"`.
          examples:
            - ac57ae8227db0eb6977413961b6168a02dd59b59f2d78215908a1a04adc95fde0762fe1a107a795b2842fc91e43d7b50a4827765f757eae1a9a72232368b9788
    PastStates:
      type: object
      readOnly: true
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          examples:
            - https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units/ac57ae8227db0eb6977413961b6168a02dd59b59f2d78215908a1a04adc95fde0762fe1a107a795b2842fc91e43d7b50a4827765f757eae1a9a72232368b9788/past-states
        start:
          type: integer
          description: Start Unix timestamp that was provided in the request query parameters
          examples:
            - 1577836800
        end:
          type: integer
          description: End Unix timestamp that was provided in the request query parameters. If it was not provided, it is the timestamp of when the request was received
          examples:
            - 1577851200
        pagination:
          $ref: "#/components/schemas/Pagination"
        pastStates:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/State"
              - $ref: "#/components/schemas/ResearchState"
          description: List of past states
    State:
      type: object
      description: An object representing the unit's dynamic info at a specific time in history
      readOnly: true
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          examples:
            - https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units/12abcde3-fgh4-5ij6-k7l8-9012345mn678/past-states/12abcde3-fgh4-5ij6-k7l8-9012345mn678
        id:
          type: string
          description: State ID (GUID)
          examples:
            - "12abcde3-fgh4-5ij6-k7l8-9012345mn678"
        timestamp:
          type: integer
          description: Unix timestamp of when this state was recorded
          examples:
            - 1577836801
        scheduleMode:
          $ref: "#/components/schemas/ScheduleModeEnum"
        storageMode:
          $ref: "#/components/schemas/StorageModeEnum"
        chargeLimit:
          type: object
          description: Based on the forecasted consumption this is the maximum and minimum amounts of energy the system will store (kWh)
          readOnly: true
          properties:
            min:
              type: number
              description: The device will not discharge beyond this limit (kWh)
              examples:
                - 0.0
            max:
              type: number
              description: The device will not charge past this limit (kWh)
              examples:
                - 2.0
        chargeRate:
          type: number
          format: double
          description: |
            Deprecated - use `demand` instead.  
            Current charging rate, in kW
          readOnly: true
          deprecated: true
        demand:
          type: number
          description: The electrical energy the heat pump is using (kW)
          readOnly: true
          examples:
            - 1.25
        dischargeRate:
          type: number
          format: double
          description: |
            Deprecated - use `consumption` instead.  
            Current discharge rate, in kW
          readOnly: true
          deprecated: true
        consumption:
          type: number
          description: The thermal energy going into the home, converted to its electrical equivalent (kW)
          readOnly: true
          examples:
            - 0.0
        charge:
          type: number
          description: The amount of thermal energy stored in the unit, converted to its electrical equivalent (kWh)
          readOnly: true
          examples:
            - 1.5
        outdoorTemp:
          type: number
          description: The outdoor ambient temperature (ºC)
          readOnly: true
          examples:
            - 16.5
    ResearchState:
      allOf:
        - $ref: "#/components/schemas/State"
        - type: object
          readOnly: true
          properties:
            indoorTemp:
              type: number
              description: The ambient indoor temperature as recorded by the unit (ºC)
              readOnly: true
              examples:
                - 21.5
            indoorOutTemp:
              type: number
              description: The temperature of the air exiting the unit (ºC)
              readOnly: true
              examples:
                - 30.0
            indoorFanSpeed:
              type: integer
              description: Percentage of how fast the indoor fan is running (%)
              minimum: 0
              maximum: 100
              readOnly: true
              examples:
                - 75
            outdoorFanSpeed:
              type: integer
              description: Percentage of how fast the outdoor heat pump fan is running (%)
              minimum: 0
              maximum: 100
              readOnly: true
              examples:
                - 0
            compressorSpeed:
              type: integer
              description: Percentage of how fast the compressor is running (%)
              minimum: 0
              maximum: 100
              readOnly: true
              examples:
                - 0
            defrost:
              type: integer
              description: Whether or not the heat pump is defrosting (0 - no, 1 - yes)
              minimum: 0
              maximum: 1
              examples:
                - 0
            setpoint:
              type: number
              description: The user-set setpoint (ºC)
              readOnly: true
              examples:
                - 23.5
            heatPumpMode:
              type: number
              description: The user-set heat pump mode (0 - off, 1 - heat, 2 - cool)
              readOnly: true
              examples:
                - 1
    StorageModeEnum:
      type: string
      description: |
        Describes the storage mode of the unit. The allowed values are:
        * `"charge"`: The unit is charging
        * `"discharge"`: The unit is discharging
        * `"maintain"`: The unit is maintaining its charge
      enum:
        - charge
        - discharge
        - maintain
      examples:
        - charge
    RealtimeStorageScheduleResponse:
      type: object
      description: A unit's schedule, consisting of a list of StorageEvents. Times are Unix timestamps
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          readOnly: true
        hasBeenDelivered:
          type: boolean
          description: If the schedule has been delivered to the unit
          readOnly: true
        schedule:
          type: array
          description: A list of times to change the unit's storage mode
          items:
            $ref: "#/components/schemas/StorageEvent"
      required:
        - href
        - schedule
        - hasBeenDelivered
    RealtimeScheduleResponse:
      required:
        - events
        - hasBeenDelivered
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/StorageEvent"
          description: The schedule events
        hasBeenDelivered:
          type: boolean
          description: If the schedule has been delivered to the unit
      description: Realtime storage schedule
    WeeklySchedule:
      type: object
      description: |
        A unit's weekly schedule, consisting of a list of weekdays and 24h times when to change the storage mode.  
        The unit will use this schedule if no other schedule is provided. This schedule is only active when a Units' scheduleMode state is set to "weekly"
      properties:
        href:
          type: string
          format: uri
          description: Link to self
          readOnly: true
        utcOffset:
          type: integer
          format: int32
          description: The UTC offset in seconds as was requested in the query parameter
          minimum: -86399
          maximum: 86399
          readOnly: true
        hasBeenDelivered:
          type: boolean
          description: If the schedule has been delivered to the unit
          readOnly: true
        schedule:
          type: array
          items:
            $ref: "#/components/schemas/WeeklyStorageModeChange"
          description: Weekly schedule
      required:
        - utcOffset
        - schedule
        - hasBeenDelivered
    WeeklyScheduleResponse:
      required:
        - hasBeenDelivered
        - events
        - utcOffset
      type: object
      properties:
        hasBeenDelivered:
          type: boolean
          description: If the schedule has been delivered to the unit
        events:
          type: array
          items:
            $ref: "#/components/schemas/WeeklyStorageModeChange"
          description: The schedule events
        utcOffset:
          type: integer
          format: int32
          description: The UTC offset (in seconds) of the returned schedule
      description: Weekly storage schedule
    ScheduleModeEnum:
      type: string
      description: |
        Describes the schedule mode of the unit. The allowed values are:
        * `"off"`: The unit is not using a schedule and the storage mode will be set to "maintain"
        * `"weekly"`: The unit is using its weekly schedule to determine its storage mode
        * `"realtime"`: The unit is using the provided real-time schedule to determine its storage mode
      enum:
        - off
        - weekly
        - realtime
    StorageEvent:
      type: object
      properties:
        start:
          type: integer
          description: When the event should begin (Unix timestamp)
          examples:
            - 1577836800
        end:
          type: integer
          description: When the event should end (Unix timestamp)
          examples:
            - 1577851200
        storageMode:
          $ref: "#/components/schemas/StorageModeEnum"
      required:
        - start
        - end
        - storageMode
    WeeklyStorageModeChange:
      type: object
      properties:
        storageMode:
          $ref: "#/components/schemas/StorageModeEnum"
        time:
          type: integer
          format: int32
          minimum: 0
          maximum: 86339
          description: "When to set storage mode (In seconds after midnight)"
          examples:
            - 25200
        days:
          type: array
          items:
            type: boolean
          description: |
            An array of size 7 representing the weekdays on which this change should take place.  
            **NOTE: `days` array starts at Sunday, i.e. `days[0]` = Sunday**
          examples:
            - [false, true, true, true, true, true, false]
      required:
        - storageMode
        - time
        - days
    Pagination:
      description: Object with information about the result set (total results, where to get the next page of results, etc.)
      type: object
      properties:
        total:
          type: integer
          description: Total number of results in the response
          examples:
            - 50
        limit:
          type: integer
          minimum: 1
          maximum: 1000
          description: The limit of results per request
          examples:
            - 50
        next:
          type: string
          format: uri
          description: URL to the next page of results. This property is not present if not applicable
      required:
        - total
        - limit
    BadRequest:
      $ref: "#/components/schemas/Error"
    Unauthorized:
      type: string
      examples:
        - You do not have permission to view this directory or page.
    Forbidden:
      $ref: "#/components/schemas/Error"
    NotFound:
      $ref: "#/components/schemas/Error"
    InternalError:
      type: string
      examples:
        - The page cannot be displayed because an internal server error has occurred.
    ServiceUnavailable:
      $ref: "#/components/schemas/Error"
    UnprocessableEntity:
      $ref: "#/components/schemas/Error"
    Error:
      type: object
      description: Sent by API
      properties:
        status:
          type: integer
          description: HTTP status code
          examples:
            - 404
        code:
          type: integer
          description: A more descriptive internal code
          examples:
            - 40401
        message:
          type: string
          description: A message describing the error
        errors:
          type: array
          items:
            $ref: "#/components/schemas/FieldError"
          description: If applicable, the parts of the request that are producing the error
      required:
        - status
        - code
        - message
    FieldError:
      type: object
      description: An error to do with a specific property/field
      properties:
        property:
          type: string
          description: The property/field of the request url/body that is producing the error
        message:
          type: string
          description: A message describing the issue with the property
    WeeklyScheduleUpdate:
      type: object
      description: The weekly schedule to assign to the unit
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/WeeklyStorageModeChange"
          description: The list of weekly storage mode changes that make up the weekly schedule
        utcOffset:
          type: integer
          description: The offset from UTC (in seconds) of the provided events.
          default: 0
          minimum: -86399
          maximum: 86399
    RealtimeScheduleUpdate:
      type: object
      description: The realtime schedule to assign to the unit
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/StorageEvent"
          description: The list of realtime events that make up the realtime schedule
    BulkUnitUpdate:
      type: object
      description: A unit update that will be applied to all units that match the given tags.
      properties:
        weeklySchedule:
          $ref: "#/components/schemas/WeeklyScheduleUpdate"
        realtimeSchedule:
          $ref: "#/components/schemas/RealtimeScheduleUpdate"
    BatchUnitUpdate:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: The id of the unit to update
        tags:
          type: array
          items:
            type: string
          description: Tags to assign to the unit. Currently only accepts 1 tag. Tags are to group units.
        weeklySchedule:
          $ref: "#/components/schemas/WeeklyScheduleUpdate"
        realtimeSchedule:
          $ref: "#/components/schemas/RealtimeScheduleUpdate"
  parameters:
    Expand:
      name: expand
      in: query
      style: form
      explode: false
      description: |
        A comma separated list of properties you wish to expand in the response (that are not provided by default). Current accepted properties:
        - `unit.state`: Include the unit's current state
        - `unit.weeklySchedule`: Include the unit's weekly storage schedule in the `weeklySchedule` property
        - `unit.realtimeSchedule`: Include the unit's realtime storage schedule in the `realtimeSchedule` property
      schema:
        type: array
        items:
          type: string
    Research:
      name: research
      in: query
      description: |
        A value of `1` expresses interest in getting state that has additional properties that can be used for research purposes.  
        Only available for certain units that allow it.
      schema:
        type: integer
        default: 0
      examples:
        none:
          value: 0
          summary: Request normal state (same as omitting the query parameter)
        one:
          value: 1
          summary: Request state with additional properties
    Utility:
      name: utilityId
      in: path
      description: A utility ID
      required: true
      schema:
        type: string
      example: "1-12abcde3-fgh4-5ij6-k7l8-9012345mn678"
    Unit:
      name: unitId
      in: path
      description: A unit ID
      required: true
      schema:
        type: string
      example: f2cdd3f373848c071a2d38e4684e0c7cfb3b8d8bd33d46e5106332de7ea2d16fe49f82415deeee0527436e9786f83447e7dc861f5f3179bd55c4168b320913bb
    State:
      name: stateId
      in: path
      description: A past state ID (GUID)
      required: true
      schema:
        type: string
      example: "12abcde3-fgh4-5ij6-k7l8-9012345mn678"
    Limit:
      name: limit
      in: query
      description: The number of items to return
      schema:
        type: integer
        format: int32
        default: 50
    Page:
      name: page
      in: query
      description: |
        An opaque, API-generated token that will be provided to you if your previous request was paged and there are one or more pages remaining.
      schema:
        type: string
    StartTimestamp:
      name: start
      in: query
      description: Unix timestamp specifying the oldest time for which to pull results
      required: true
      schema:
        type: integer
        format: int64
      example: 1577836800
    EndTimestamp:
      name: end
      in: query
      description: |
        Unix timestamp specifying the most recent time for which to pull results.  
        If not provided, defaults to current time.
      schema:
        type: integer
        format: int64
      example: 1577851200
    UtcOffset_wsput:
      name: utcOffset
      in: query
      description: The time zone of the provided schedule, as an offset from UTC in seconds. For example, if the schedule is in Atlantic Standard Time (AST/UTC-0400), you would provide `utcOffset=-14400`. If not provided, we assume the provided schedule is in UTC time (offset of `0`).
      schema:
        type: integer
        format: int32
        minimum: -86399
        maximum: 86399
        default: 0
      example: 25200
    UtcOffset_wsget:
      name: utcOffset
      in: query
      description: The time zone in which the schedule should be returned, as an offset from UTC in seconds. For example, if you provide `utcOffset=-14400`, the returned schedule will be in AST/UTC-0400. If not provided, the schedule will be returned in UTC time (offset of `0`).
      schema:
        type: integer
        format: int32
        minimum: -86399
        maximum: 86399
        default: 0
      example: 25200
    PairingCode:
      name: pairingCodeId
      in: path
      description: An existing pairing code
      required: true
      schema:
        type: string
      example: "01234567"
  requestBodies:
    RealtimeStorageScheduleRequestBody:
      description: A storage mode schedule
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RealtimeStorageScheduleResponse"
          examples:
            scheduleUpdateExample:
              $ref: "#/components/examples/RealtimeStorageScheduleRequestBodyExample"
    WeeklyStorageScheduleRequestBody:
      description: A weekly storage mode schedule
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WeeklySchedule"
          examples:
            weeklyScheduleUpdateExample:
              $ref: "#/components/examples/WeeklyStorageScheduleRequestBodyExample"
    UpdateUnitsByTagsRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              tags:
                type: array
                items:
                  type: string
                description: Tags to match. Currently only accepts 1 tag.
              update:
                $ref: "#/components/schemas/BulkUnitUpdate"
    UpdateUnitsRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              units:
                type: array
                description: A list of unit updates
                items:
                  $ref: "#/components/schemas/BatchUnitUpdate"
  examples:
    RealtimeStorageScheduleRequestBodyExample:
      value:
        schedule:
          - start: 1577836800
            end: 1577851200
            storageMode: "charge"
          - start: 1577851200
            end: 1577865600
            storageMode: "maintain"
          - start: 1577865600
            end: 1577880000
            storageMode: "discharge"
    WeeklyStorageScheduleRequestBodyExample:
      value:
        schedule:
          - time: 0
            days: [false, true, true, true, true, true, false]
            storageMode: "charge"
          - time: 25200
            days: [false, true, true, true, true, true, false]
            storageMode: "discharge"
          - time: 32400
            storageMode: "charge"
            days: [false, true, true, true, true, true, false]
    RealtimeStorageScheduleResponseExample:
      value:
        href: https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units/f2cdd3f373848c071a2d38e4684e0c7cfb3b8d8bd33d46e5106332de7ea2d16fe49f82415deeee0527436e9786f83447e7dc861f5f3179bd55c4168b320913bb/realtime-schedule
        hasBeenDelivered: true
        schedule:
          - start: 1577836800
            end: 1577851200
            storageMode: "charge"
          - start: 1577851200
            end: 1577865600
            storageMode: "maintain"
          - start: 1577865600
            end: 1577880000
            storageMode: "discharge"
    NewPairingCodeResponseExample:
      value:
        href: https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/pairing-codes/01234567
        code: "01234567"
        expiresOn: 1617836800
        status: new
        unitId: null
    WeeklyStorageScheduleResponseExample:
      value:
        href: https://api.stash.energy/utilities/12abcde3-fgh4-5ij6-k7l8-9012345mn678/units/f2cdd3f373848c071a2d38e4684e0c7cfb3b8d8bd33d46e5106332de7ea2d16fe49f82415deeee0527436e9786f83447e7dc861f5f3179bd55c4168b320913bb/weekly-schedule
        utcOffset: 0
        hasBeenDelivered: true
        schedule:
          - time: 0
            days: [false, true, true, true, true, true, false]
            storageMode: "charge"
          - time: 25200
            days: [false, true, true, true, true, true, false]
            storageMode: "discharge"
          - time: 32400
            storageMode: "charge"
            days: [false, true, true, true, true, true, false]
    BadRequestResponseExample:
      value:
        status: 400
        code: 40001
        message: "Could not parse body of request"
    NotFoundResponseExample:
      value:
        status: 404
        code: 40401
        message: "Utility not found: '1-12abcde3-fgh4-5ij6-k7l8-9012345mn678'"
    UnprocessableEntityResponseExample:
      value:
        status: 422
        code: 42201
        message: Could not process request
        errors:
          - property: schedule[0].storageMode
            message: Value "chrge" is not defined in enum.
